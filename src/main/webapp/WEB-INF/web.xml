<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">

	<!-- 日志 输出 变量 -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp.root</param-value>
	</context-param>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<listener> 
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class> 
	</listener>
	
	<!-- 编码过虑-->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> 

	<!-- Spring监听 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	
	<!--　该servlet为tomcat,jetty等容器提供,将静态资源映射从/改为/static/目录，如原来访问　http://localhost/foo.css　,现在http://localhost/static/foo.css　-->  
<!-- 不拦截静态文件    不拦截有效 -->     
<servlet-mapping>  
    <servlet-name>default</servlet-name>  
    <url-pattern>/js/*</url-pattern>  
    <url-pattern>/bootstrap/*</url-pattern>  
    <url-pattern>/image/*</url-pattern>  
    <url-pattern>/summernote/*</url-pattern>  
</servlet-mapping>  

<!-- Spring MVC DispatcherServlet -->
	<servlet>
		<servlet-name>spring_aop_log</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springMVC-servlet.xml</param-value>
		</init-param>
		<!--    
		当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；
		当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。
		正数的值越小，启动该servlet的优先级越高。-->
		 
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring_aop_log</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
	
	
	<!-- 解决HTTP PUT请求Spring无法获取请求参数的问题 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 首页 -->
	<display-name>SpringMvcMaven</display-name>
	<welcome-file-list>
		<welcome-file>/index</welcome-file>
	</welcome-file-list>
	
	
	<!-- 未捕获异常的处理   出错页面定义 -->
 	<error-page>  
    	<exception-type>java.lang.Throwable</exception-type>  
    	<location>/500.html</location>  
	</error-page>  
	<error-page>  
    	<error-code>500</error-code>  
    	<location>/500.html</location>  
	</error-page>  
	<error-page>  
    	<error-code>404</error-code>  
    	<location>/404.html</location>  
	</error-page> 
	<error-page>  
    	<error-code>403</error-code>  
    	<location>/403.html</location>  
	</error-page>  
	<error-page>  
    	<error-code>405</error-code>  
    	<location>/405.html</location>  
	</error-page>  
	
	

</web-app>